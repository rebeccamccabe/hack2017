
def check_win():
    numberPungsConcealed = findPungsInHand()
    numberChowsConcealed = findChowsInHand()
    numberKongsConcealed = findKongsInHand()

    exposed_counts_list = analyze_revealed()
    numberPungsExposed = exposed_counts_list[0]
    numberChowsExposed = exposed_counts_list[1]
    numberKongsExposed = exposed_counts_list[2]
    
    numberPungsTotal = numberPungsConcealed + numberPungsExposed
    numberChowsTotal = numberChowsConcealed + numberChowsExposed
    numberKongsTotal = numberKongsConcealed + numberKongsExposed
    numberSets=numberPungsTotal + numnerChowsTotal + numberKongsTotal;

    numberPairs = findPairsInHand()
    
    print('Number sets:',numberSets)
    print('Number pairs:',numberPairs)
    print('Flowers:', has_cashed_money)
    if(numberSets >= 4 & numberPairs >= 1 & has_cashed_money==true):
        return true
    else: return false

def analyze_revealed():
    revealed=self.revealed
    #for testing: revealed=[['B1','B2','B3'],['D2','D2','D2'],['C4','C5','C6'],['B4','B4','B4','B4'],['D8','D8','D8','D8']]
    #expected count: 1 pung, 2 chows, 2 kongs

    numberPungsExposed=0
    numberChowsExposed=0
    numberKongsExposed=0
    
    for set in revealed:
        if set[0]!=set[1]:
            numberChowsExposed+=1
        elif len(set)== 4:
            numberKongsExposed+=1
        else: numberPungsExposed+=1
    numRevealed = [numberPungsExposed, numberChowsExposed, numberKongsExposed]
    print (numRevealed)
    return numRevealed
'''
def findPungsInHand():
    #still need to write
    #choose a tile and see if both one below and one above exist

def findChowsInHand():
    #still need to write

def findKongsInHand():
    #still need to write
'''
