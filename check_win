import copy

dict_tile_to_name = {["bamboo", 1]:"B1", ["bamboo", 2]:"B2", ["bamboo", 3]:"B3", ["bamboo", 4]:"B4", ["bamboo", 5]:"B5",["bamboo", 6]:"B6",
                   ["bamboo", 7]:"B7" , ["bamboo", 8]:"B8", ["bamboo", 9]:"B9",
                   ["dots", 1]:"D1", ["dots", 2]:"D2", ["dots", 3]:"D3", ["dots", 4]:"D4", ["dots", 5]:"D5", ["dots", 6]:"D6",
                   ["dots", 7]:"D7" , ["dots", 8]:"D8", ["dots", 9]:"D9", 
                   ["characters", 1]:"C1", ["characters", 2]:"C2", ["characters", 3]:"C3", ["characters", 4]:"C4", ["characters", 5]:"C5",["characters", 6]:"C6",
                   ["characters", 7]:"C7" , ["characters", 8]:"C8", ["characters", 9]:"C9", 
                   ["specials", 1]:"SN", ["specials", 2]:"SE", ["specials", 3]:"SS", ["specials", 4]:"SW", ["specials", 5]:"SM",["specials", 6]:"SG", ["specials", 7]:"SB",
                   ["flowers", 0]:"F"}

def check_mahjong(player):
    hand=player.hand
    numberPungsConcealed = findPungsInHand(hand)
    numberChowsConcealed = findChowsInHand(hand)
    #numberKongsConcealed = findKongsInHand(hand)

    exposed_counts_list = analyze_revealed(player.revealed)
    numberPungsExposed = exposed_counts_list[0]
    numberChowsExposed = exposed_counts_list[1]
    #numberKongsExposed = exposed_counts_list[2]
    
    numberPungsTotal = numberPungsConcealed + numberPungsExposed
    numberChowsTotal = numberChowsConcealed + numberChowsExposed
    #numberKongsTotal = numberKongsConcealed + numberKongsExposed
    numberSets=numberPungsTotal + numnerChowsTotal #+ numberKongsTotal

    numberPairs = findPairsInHand(hand)
    
    print('Number sets:',numberSets)
    print('Number pairs:',numberPairs)
    print('Flowers:', has_cashed_money)
    if(numberSets >= 4 & numberPairs >= 1 & has_cashed_money==true):
        return true
    else: return false

def analyze_revealed(revealed):
    #for testing: revealed=[['B1','B2','B3'],['D2','D2','D2'],['C4','C5','C6'],['B4','B4','B4','B4'],['D8','D8','D8','D8']]
    #expected count: 1 pung, 2 chows, 2 kongs

    numberPungsExposed=0
    numberChowsExposed=0
    #numberKongsExposed=0
    
    for set in revealed:
        if set[0]!=set[1]:
            numberChowsExposed+=1
        #elif len(set)== 4:
        #    numberKongsExposed+=1
        else: numberPungsExposed+=1
    numRevealed = [numberPungsExposed, numberChowsExposed] , #numberKongsExposed]
    print (numRevealed)
    return numRevealed

def findPungsInHand(hand):
    numPungTiles=0
    for tile in hand:
        if hand.count(tile) >= 3:
            numPungTiles+=1
    return numPungTiles/3 #One pung for every 3 pung tiles 

def findChowsInHand(hand):
    numChows=0;
    workingHand = copy.deepcopy(hand) #working hand will have all chows removed that were already identified, so that (1,2,3,4) is not counted as two chows
    for tile in workingHand:
        #look for a tile that's one below and one above     
        desiredCard = dict_tile_to_name([tile.suit, tile.rank+1])
        desiredCard2 = dict_tile_to_name([tile.suit, tile.rank-1])
        
        if workingHand.count(desiredCard) >= 1 & workingHand.count(desiredCard2) >= 1:
            numChows+=1
            workingHand.remove(desiredCard)
            workingHand.remove(desiredCard2)
            #remove both cards
    return numChows      

#def findKongsInHand(hand):
    
def findPairsInHand(hand):
    numPungTiles=0
    for tile in hand:
        if hand.count(tile) = 2:
            numPungTiles+=1
    return numPungTiles/2 #One pung for every 3 pung tiles 
